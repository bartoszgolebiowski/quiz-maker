{
  "version": 3,
  "sources": ["../../../app/components/input/InputControll.tsx", "../../../app/components/ui/label.tsx", "../../../node_modules/@radix-ui/react-label/dist/packages/react/label/src/index.ts", "../../../node_modules/@radix-ui/react-label/dist/packages/react/label/src/Label.tsx", "../../../app/components/input/TextAreaControll.tsx", "../../../app/components/ui/textarea.tsx", "../../../node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/index.ts", "../../../node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/usePrevious.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\input\\\\\\\\InputControll.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\input\\\\InputControll.tsx\");\n  import.meta.hot.lastModified = \"1714909171246.7798\";\n}\n// REMIX HMR END\n\nimport clsx from \"clsx\";\nimport * as React from \"react\";\nimport { Input } from \"../ui/input\";\nimport { Label } from \"../ui/label\";\nconst InputControll = React.forwardRef(_c = (props, ref) => {\n  const {\n    innerProps = {\n      wrapperProps: {},\n      labelProps: {}\n    },\n    className,\n    errorText,\n    label,\n    ...rest\n  } = props;\n  return <div {...innerProps.wrapperProps}>\r\n        {label ? <Label className={clsx(innerProps?.labelProps?.className, {\n      [\"text-red-600\"]: errorText\n    })} htmlFor={rest.id}>\r\n            {label}\r\n          </Label> : null}\r\n        <Input ref={ref} className={clsx(className, {\n      [\"border-red-600 border-2\"]: errorText\n    })} {...rest} />\r\n        {errorText ? <p className=\"text-sm text-red-600\">{errorText}</p> : null}\r\n      </div>;\n});\n_c2 = InputControll;\nInputControll.displayName = \"InputControll\";\nexport default InputControll;\nvar _c, _c2;\n$RefreshReg$(_c, \"InputControll$React.forwardRef\");\n$RefreshReg$(_c2, \"InputControll\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\ui\\\\\\\\label.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\ui\\\\label.tsx\");\n  import.meta.hot.lastModified = \"1704552867257.7798\";\n}\n// REMIX HMR END\n\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"~/components/css\";\nconst labelVariants = cva(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\");\nconst Label = React.forwardRef(_c = ({\n  className,\n  ...props\n}, ref) => <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />);\n_c2 = Label;\nLabel.displayName = LabelPrimitive.Root.displayName;\nexport { Label };\nvar _c, _c2;\n$RefreshReg$(_c, \"Label$React.forwardRef\");\n$RefreshReg$(_c2, \"Label\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export {\n  Label,\n  //\n  Root,\n} from './Label';\nexport type { LabelProps } from './Label';\n", "import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelElement = React.ElementRef<typeof Primitive.label>;\ntype PrimitiveLabelProps = Radix.ComponentPropsWithoutRef<typeof Primitive.label>;\ninterface LabelProps extends PrimitiveLabelProps {}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  return (\n    <Primitive.label\n      {...props}\n      ref={forwardedRef}\n      onMouseDown={(event) => {\n        props.onMouseDown?.(event);\n        // prevent text selection when double clicking label\n        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n      }}\n    />\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n};\nexport type { LabelProps };\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\input\\\\\\\\TextAreaControll.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\input\\\\TextAreaControll.tsx\");\n  import.meta.hot.lastModified = \"1704314016593.3264\";\n}\n// REMIX HMR END\n\nimport clsx from \"clsx\";\nimport * as React from \"react\";\nimport { Textarea } from \"../ui/textarea\";\nimport { Label } from \"../ui/label\";\nconst TextAreaControll = React.forwardRef(_c = (props, ref) => {\n  const {\n    innerProps = {\n      wrapperProps: {},\n      labelProps: {}\n    },\n    errorText,\n    className,\n    label,\n    ...rest\n  } = props;\n  return <div {...innerProps.wrapperProps} className={clsx(\"w-full\", innerProps?.wrapperProps?.className)}>\r\n        <Label className={clsx(innerProps?.wrapperProps?.className, {\n      [\"text-red-600\"]: errorText\n    })} htmlFor={rest.id}>\r\n          {label}\r\n        </Label>\r\n        <Textarea ref={ref} className={clsx(className, {\n      [\"border-red-600 border-2\"]: errorText\n    })} {...rest} />\r\n        {errorText ? <p className=\"text-sm text-red-600\">{errorText}</p> : null}\r\n      </div>;\n});\n_c2 = TextAreaControll;\nexport default TextAreaControll;\nvar _c, _c2;\n$RefreshReg$(_c, \"TextAreaControll$React.forwardRef\");\n$RefreshReg$(_c2, \"TextAreaControll\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\ui\\\\\\\\textarea.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\ui\\\\textarea.tsx\");\n  import.meta.hot.lastModified = \"1704552867271.7786\";\n}\n// REMIX HMR END\n\nimport * as React from \"react\";\nimport { cn } from \"~/components/css\";\nconst Textarea = React.forwardRef(_c = ({\n  className,\n  ...props\n}, ref) => {\n  return <textarea className={cn(\"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\", className)} ref={ref} {...props} />;\n});\n_c2 = Textarea;\nTextarea.displayName = \"Textarea\";\nexport { Textarea };\nvar _c, _c2;\n$RefreshReg$(_c, \"Textarea$React.forwardRef\");\n$RefreshReg$(_c2, \"Textarea\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export { usePrevious } from './usePrevious';\n", "import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef({ value, previous: value });\n\n  // We compare values before making an update to ensure that\n  // a change has been made. This ensures the previous value is\n  // persisted correctly between renders.\n  return React.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\n\nexport { usePrevious };\n"],
  "mappings": "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",
  "names": ["React", "Label", "React", "props", "forwardedRef", "$7V4JZ$createElement", "event", "onMouseDown", "defaultPrevented", "detail", "preventDefault", "Root", "Label", "import_jsx_dev_runtime", "_c", "_c2", "React", "React", "import_jsx_dev_runtime", "_c", "_c2", "_c", "_c2", "import_jsx_dev_runtime", "_c", "_c2", "usePrevious", "value", "ref", "React", "previous", "current"]
}
