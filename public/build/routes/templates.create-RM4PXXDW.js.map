{
  "version": 3,
  "sources": ["../../../app/routes/templates.create.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\templates.create.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\templates.create.tsx\");\n  import.meta.hot.lastModified = \"1714932778001.7285\";\n}\n// REMIX HMR END\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\nimport { PutItemCommand, DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nimport { useFetcher } from \"@remix-run/react\";\nimport { redirect } from \"@remix-run/node\";\nimport { zfd } from \"zod-form-data\";\nimport { z } from \"zod\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport GenericCardServerrErrors from \"~/templates/GenericCardServerrErrors\";\nimport EditTemplate from \"~/templates/EditTemplate\";\nimport { quizContentSchema } from \"~/templates/validation\";\nimport { error400, error401, formatErrors, error500 } from \"~/utils/errors\";\nimport { authAction, loginRequiredLoader } from \"~/auth.server\";\nimport { env } from \"~/env\";\nexport const meta = () => {\n  return [{\n    title: \"Create Quiz Template\"\n  }, {\n    name: \"description\",\n    content: \"Welcome to Remix!\"\n  }];\n};\nexport async function loader(args) {\n  const user = await loginRequiredLoader(args);\n  if (user) {\n    return {};\n  }\n  return {};\n}\nexport default function Index() {\n  _s();\n  const fetcher = useFetcher();\n  const isSubmitting = fetcher.state !== \"idle\";\n  const handleSubmit = state => {\n    fetcher.submit({\n      action: \"create\",\n      data: JSON.stringify(state),\n      title: state.title,\n      description: state.description\n    }, {\n      method: \"POST\"\n    });\n  };\n  return <>\r\n      <EditTemplate isSubmitting={isSubmitting} onSubmit={handleSubmit}>\r\n        Manual creator\r\n      </EditTemplate>\r\n      {fetcher.data?.type === \"error\" ? <GenericCardServerrErrors error={fetcher.data} /> : null}\r\n    </>;\n}\n_s(Index, \"2WHaGQTcUOgkXDaibwUgjUp1MBY=\", false, function () {\n  return [useFetcher];\n});\n_c = Index;\nexport const action = async args => {\n  const form = await args.request.formData();\n  switch (form.get(\"action\")) {\n    case \"create\":\n      return actionCreate(args, form);\n    default:\n      return error400(\"Invalid action\", []);\n  }\n};\nconst createTemplateSchema = zfd.formData({\n  title: zfd.text(z.string().min(1, {\n    message: \"Title is required\"\n  }).max(255, {\n    message: \"Title is too long, max 255 characters\"\n  })),\n  description: zfd.text(z.string().min(1, {\n    message: \"Description is required\"\n  }).max(255, {\n    message: \"Description is too long, max 255 characters\"\n  })).optional().default(\"\"),\n  data: zfd.json(quizContentSchema)\n});\nconst actionCreate = async (args, form) => {\n  return authAction(args, async user => {\n    if (!user.username) {\n      return error401();\n    }\n    const input = createTemplateSchema.safeParse(form);\n    if (!input.success) {\n      const formattedErrors = formatErrors(input.error);\n      return error400(\"Invalid form input\", formattedErrors);\n    }\n    const s3Client = new S3Client({});\n    const dynamodbClient = new DynamoDBClient({});\n    const fileName = uuidv4();\n    const command = new PutObjectCommand({\n      Bucket: env.BUCKET_NAME,\n      Key: `${user.username}/templates/${fileName}.json`,\n      Body: JSON.stringify({\n        title: input.data.title,\n        description: input.data.description,\n        data: input.data.data\n      })\n    });\n    try {\n      const s3Resposne = await s3Client.send(command);\n      const versionId = s3Resposne.VersionId;\n      if (!versionId) {\n        throw new Error(\"S3 Versioning not enabled\");\n      }\n      const putItemCommand = new PutItemCommand({\n        TableName: env.TABLE_NAME,\n        Item: {\n          userId: {\n            S: user.username\n          },\n          id: {\n            S: fileName\n          },\n          title: {\n            S: input.data.title\n          },\n          version: {\n            S: versionId\n          },\n          description: {\n            S: input.data.description\n          }\n        }\n      });\n      await dynamodbClient.send(putItemCommand);\n      return redirect(`/templates/${fileName}/details`);\n    } catch (error) {\n      console.error(error);\n      return error500(\"Something went wrong\");\n    }\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,kBAAyB;AAQzB,kBAAgD;AA+BvC;AA9DT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4CAA8C,EAAE;AAAA,EACzF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAmC;AACnC,cAAY,IAAI,eAAe;AACjC;AAgBO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AAQe,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM,UAAU,WAAW;AAC3B,QAAM,eAAe,QAAQ,UAAU;AACvC,QAAM,eAAe,WAAS;AAC5B,YAAQ,OAAO;AAAA,MACb,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,KAAK;AAAA,MAC1B,OAAO,MAAM;AAAA,MACb,aAAa,MAAM;AAAA,IACrB,GAAG;AAAA,MACD,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AACA,SAAO,sFACH;AAAA,uDAAC,wBAAa,cAA4B,UAAU,cAAc,8BAAlE;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACC,QAAQ,MAAM,SAAS,UAAU,mDAAC,oCAAyB,OAAO,QAAQ,QAAzC;AAAA;AAAA;AAAA;AAAA,WAA+C,IAAK;AAAA,OAJnF;AAAA;AAAA;AAAA;AAAA,SAKL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,UAAU;AACpB,CAAC;AACD,KAAK;AAUL,IAAM,uBAAuB,gBAAI,SAAS;AAAA,EACxC,OAAO,gBAAI,KAAK,EAAE,OAAO,EAAE,IAAI,GAAG;AAAA,IAChC,SAAS;AAAA,EACX,CAAC,EAAE,IAAI,KAAK;AAAA,IACV,SAAS;AAAA,EACX,CAAC,CAAC;AAAA,EACF,aAAa,gBAAI,KAAK,EAAE,OAAO,EAAE,IAAI,GAAG;AAAA,IACtC,SAAS;AAAA,EACX,CAAC,EAAE,IAAI,KAAK;AAAA,IACV,SAAS;AAAA,EACX,CAAC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE;AAAA,EACzB,MAAM,gBAAI,KAAK,iBAAiB;AAClC,CAAC;AAyDD,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
