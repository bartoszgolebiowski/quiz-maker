{
  "version": 3,
  "sources": ["../../../app/routes/templates.$id.edit.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\templates.$id.edit.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\templates.$id.edit.tsx\");\n  import.meta.hot.lastModified = \"1719051185169.4631\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { useFetcher, useLoaderData } from \"@remix-run/react\";\nimport { z } from \"zod\";\nimport { error400, error401, formatErrors } from \"~/utils/errors\";\nimport GenericCardServerrErrors from \"~/templates/GenericCardServerrErrors\";\nimport EditTemplate from \"~/templates/EditTemplate\";\nimport { updateTemplateSchema } from \"~/templates/validation\";\nimport { authAction, loginRequiredLoader } from \"~/auth.server\";\nimport { templateClient } from \"~/db/client\";\nexport const meta = () => {\n  return [{\n    title: \"Edit Quiz Template\"\n  }, {\n    name: \"description\",\n    content: \"Welcome to Remix!\"\n  }];\n};\nconst pathParamsSchema = z.object({\n  id: z.coerce.string()\n});\nexport const loader = async args => {\n  const user = await loginRequiredLoader(args);\n  const params = pathParamsSchema.safeParse(args.params);\n  if (!params.success) {\n    const formattedErrors = formatErrors(params.error);\n    throw error400(\"Invalid path params\", formattedErrors);\n  }\n  const template = await templateClient.getTemplatesByUserIdAndTemplateId(user.username, params.data.id);\n  return json({\n    title: template.title,\n    description: template.description,\n    data: template.data.data\n  });\n};\nexport default function Index() {\n  _s();\n  const data = useLoaderData();\n  const fetcher = useFetcher();\n  const isSubmitting = fetcher.state !== \"idle\";\n  const initial = {\n    title: data.title,\n    description: data.description,\n    data: data.data\n  };\n  const handleSubmit = state => {\n    fetcher.submit({\n      action: \"edit\",\n      data: JSON.stringify(state),\n      title: state.title,\n      description: state.description\n    }, {\n      method: \"POST\"\n    });\n  };\n  return <>\r\n      <EditTemplate initial={initial} isSubmitting={isSubmitting} onSubmit={handleSubmit} />\r\n      {fetcher.data?.type === \"error\" && fetcher.state === \"idle\" ? <GenericCardServerrErrors error={fetcher.data} /> : null}\r\n    </>;\n}\n_s(Index, \"7ZsjsNr2e15PzLVKUx9CA7bMCjw=\", false, function () {\n  return [useLoaderData, useFetcher];\n});\n_c = Index;\nexport const action = async args => {\n  const form = await args.request.formData();\n  switch (form.get(\"action\")) {\n    case \"edit\":\n      return actionEdit(args, form);\n    default:\n      return error400(\"Invalid action\", []);\n  }\n};\nconst actionEdit = async (args, form) => {\n  return authAction(args, async user => {\n    if (!user.username) {\n      return error401();\n    }\n    const params = pathParamsSchema.safeParse(args.params);\n    if (!params.success) {\n      const formattedErrors = formatErrors(params.error);\n      throw error400(\"Invalid path params\", formattedErrors);\n    }\n    const input = updateTemplateSchema.safeParse(form);\n    if (!input.success) {\n      const formattedErrors = formatErrors(input.error);\n      throw error400(\"Invalid form input\", formattedErrors);\n    }\n    await templateClient.updateTemplate(input.data, user.username, params.data.id);\n    return redirect(`/templates`);\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAA+B;AAO/B,kBAAgD;AA+CvC;AA1ET,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,8CAAgD,EAAE;AAAA,EAC3F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAqC;AACrC,cAAY,IAAI,eAAe;AACjC;AAYO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AACA,IAAM,mBAAmB,EAAE,OAAO;AAAA,EAChC,IAAI,EAAE,OAAO,OAAO;AACtB,CAAC;AAec,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,QAAM,UAAU,WAAW;AAC3B,QAAM,eAAe,QAAQ,UAAU;AACvC,QAAM,UAAU;AAAA,IACd,OAAO,KAAK;AAAA,IACZ,aAAa,KAAK;AAAA,IAClB,MAAM,KAAK;AAAA,EACb;AACA,QAAM,eAAe,WAAS;AAC5B,YAAQ,OAAO;AAAA,MACb,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,KAAK;AAAA,MAC1B,OAAO,MAAM;AAAA,MACb,aAAa,MAAM;AAAA,IACrB,GAAG;AAAA,MACD,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AACA,SAAO,sFACH;AAAA,uDAAC,wBAAa,SAAkB,cAA4B,UAAU,gBAAtE;AAAA;AAAA;AAAA;AAAA,WAAoF;AAAA,IACnF,QAAQ,MAAM,SAAS,WAAW,QAAQ,UAAU,SAAS,mDAAC,oCAAyB,OAAO,QAAQ,QAAzC;AAAA;AAAA;AAAA;AAAA,WAA+C,IAAK;AAAA,OAF/G;AAAA;AAAA;AAAA;AAAA,SAGL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,eAAe,UAAU;AACnC,CAAC;AACD,KAAK;AA6BL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
